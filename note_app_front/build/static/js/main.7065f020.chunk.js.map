{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCe3B,EArBA,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVE,SAAAO,GAEb,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALE,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCP5BK,EAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKjB,UAAU,SACZiB,ICOQC,EAfF,WAOX,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGCuHOC,EA3HH,SAACC,GAAW,IAAD,EACKC,mBAASD,EAAME,OADpB,mBACdA,EADc,KACPC,EADO,OAESF,mBAC5B,iBAHmB,mBAEdG,EAFc,KAELC,EAFK,OAKSJ,oBAAS,GALlB,mBAKdK,EALc,KAKLC,EALK,OAMmBN,mBAAS,MAN5B,mBAMdO,EANc,KAMAC,EANA,KAQfC,EAAcJ,EAChBJ,EAEAA,EAAMS,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,aAuB9BqC,qBAAU,WACRC,IAEC5B,MAAK,SAAA6B,GACJX,EAASW,QAEV,IA2DH,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcrB,QAASe,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BA5CeI,EAAYK,KAAI,SAAA3C,GACjC,OACE,kBAAC,EAAD,CACE4C,IAAK5C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBA3BG,SAAAU,GAEzB,IAAMX,EAAO8B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,eAAQ/C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDsC,EACU9B,EAAIoC,GACXlC,MAAK,SAAAmC,GACJjB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOgD,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJrC,EAAKK,QADD,sCAGf8C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMS,QAAO,SAAAO,GAAC,OAAIA,EAAEnC,KAAOA,SAUZyC,CAAmBpD,EAAKW,WA0ClD,0BAAM0C,SApCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS2B,EACTpB,MAAM,IAAI6C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BjD,GAAImB,EAAM+B,OAAS,GAGrBpB,EACUe,GACP3C,MAAK,SAAAmC,GACJjB,EAASD,EAAMd,OAAOgC,IACtBf,EAAW,SAwBX,2BACI6B,MAAO9B,EACP+B,SAtBe,SAACT,GAExBrB,EAAWqB,EAAMU,OAAOF,UAsBpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MClFNC,IAASC,OACP,kBAAC,EAAD,CAAKrC,MAzBO,KA0BZsC,SAASC,eAAe,W","file":"static/js/main.7065f020.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n      id: 10000,\n      content: 'This note is not saved to server',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n  } \n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n  \nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification\n  ","import React from 'react'\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n  \n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n      </div> \n    )\n  }\n\n  export default Footer","import React,  { useState, useEffect} from 'react'\nimport Note from './components/Note'\n\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes)\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  ) \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const notesToShow = showAll\n    ? notes\n    //: notes.filter(note => note.important === true)\n    : notes.filter(note => note.important )\n\n  /* useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  }, []) */\n\n  /* const hook = () => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  }\n  useEffect(hook, []) */\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    \n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote)) \n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n  }\n\n  const rows = () => notesToShow.map(note => {\n    return  (\n      <Note\n        key={note.id}\n        note={note}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ) \n  } \n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    //console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote} >\n        <input \n            value={newNote}\n            onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button> \n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n//import axios from 'axios'\n\n/* axios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  ReactDOM.render(\n    <App notes={notes} />,\n    document.getElementById('root')\n  )\n})\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\npromise2.then( responce => {\n  console.log('responce', responce )\n}) \n */\nconst notes = []\n\n/* const notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n] */\n\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}